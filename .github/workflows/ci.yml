name: CI and CD Pipeline

on:
  pull_request:
    branches:
      - 'main'       
      - 'release/**' 

jobs:
  # Validation to ensure only release/** branches can create PRs into main
  validate-pr:
    runs-on: ubuntu-latest
    name: Validate PR Source and Target Branches

    steps:
      - name: Check if PR is from release/** into main
        run: |
          SOURCE_BRANCH=$(echo ${{ github.event.pull_request.head.ref }})
          TARGET_BRANCH=$(echo ${{ github.event.pull_request.base.ref }})

          echo "Source Branch: $SOURCE_BRANCH"
          echo "Target Branch: $TARGET_BRANCH"

          # Check if the target is the main branch and the source is NOT a release/** branch
          if [[ "$TARGET_BRANCH" == "main" && "$SOURCE_BRANCH" != release/* ]]; then
            echo "Error: Only release/** branches can create PRs into main."
            exit 1
          fi

  build-test-deploy-dev: 
    runs-on: ubuntu-latest
    needs: validate-pr
    if: success()
    name: Build, Test, and Deploy to Development

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> $GITHUB_ENV
          poetry --version

      - name: Install all dependencies (including dev)
        run: |
          poetry install

      - name: Run pre-commit hooks
        run: |
          poetry run pre-commit run

      - name: Run tests with pytest
        run: |
          poetry run pytest --cov=src tests/

      - name: Build Docker image
        run: |
          docker build -t my_streamlit_app .

      - name: Run Docker container
        run: |
          docker run -d -p 8501:8501 --name test_app my_streamlit_app

      - name: Test Docker container
        run: |
          for i in {1..10}; do
            curl -f http://localhost:8501 && break
            sleep 2
          done

      - name: Stop Docker container
        run: |
          docker stop test_app
          docker rm test_app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin

      - name: Build and push Docker image to Docker Hub
        env:
          IMAGE_NAME: streamlit-quiz-app-dev
        run: |
          docker build -t ${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}:latest .
          docker push ${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}:latest

  deploy-to-prd:
    runs-on: ubuntu-latest
    needs: build-test-deploy-dev
    if: github.event.pull_request.base.ref == 'main' && startsWith(github.event.pull_request.head.ref, 'release/')
    name: Deploy to Production

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username ${{ secrets.DOCKER_USER }} --password-stdin

    - name: Build and push Docker image to Docker Hub
      env:
        IMAGE_NAME: streamlit-quiz-app-prd
      run: |
        docker build -t ${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}:latest .
        docker push ${{ secrets.DOCKER_USER }}/${{ env.IMAGE_NAME }}:latest